import numpy as np
import sounddevice as sd
import matplotlib.pyplot as plt
import time
# Parameters
fs = 44100  # Sampling frequency
duration = 5.0  # seconds
iterations = 10000  # Number of iterations for FXLMS
mu = 0.01  # Step size for the adaptive filter
delay = 20  # Delay for the filter

# Generate random noise signal (this represents the unwanted noise)
np.random.seed(42)  # For reproducibility
noise_signal = np.random.normal(0, 1, int(fs * duration))

# Play the noise signal
print("Playing Noise Signal...")
sd.play(noise_signal, fs)
sd.wait()  # Wait until the sound has finished playing
time.sleep(0.5)

# FXLMS Algorithm
# Initialize the filter coefficients and error signal
N = delay + 1  # Number of filter coefficients
w = np.zeros(N)  # Adaptive filter coefficients (initially zero)
error_signal = np.zeros_like(noise_signal)  # Error signal
anti_noise_signal = np.zeros_like(noise_signal)  # Anti-noise signal (to be generated)

# Run the FXLMS algorithm
for n in range(len(noise_signal) - delay):
    # Input signal (delayed noise signal segment)
    x = noise_signal[n:n + N]
    
    # Output of the adaptive filter (estimated anti-noise)
    y_hat = np.dot(w, x)
    
    # Store the generated anti-noise
    anti_noise_signal[n + delay] = y_hat
    
    # Calculate the error signal (difference between noise and estimated anti-noise)
    error_signal[n + delay] = noise_signal[n + delay] - y_hat
    
    # Update the filter coefficients based on the error signal
    w += mu * error_signal[n + delay] * x

# Play the generated anti-noise signal
print("Playing Anti-Noise Signal (generated by the algorithm)...")
sd.play(anti_noise_signal, fs)
sd.wait()  # Wait until the sound has finished playing
time.sleep(2)
# Play the error signal (ideally, this should be close to zero)
print("Playing Error Signal (after cancellation)...")
sd.play(error_signal, fs)
sd.wait()  # Wait until the sound has finished playing

# Visualization
plt.figure(figsize=(12, 8))

# Plotting the signals
plt.subplot(3, 1, 1)
plt.title('Noise Signal')
plt.plot(noise_signal,color='blue')
plt.xlabel('Samples')
plt.ylabel('Amplitude')

plt.subplot(3, 1, 2)
plt.title('Generated Anti-Noise Signal')
plt.plot(anti_noise_signal)
plt.xlabel('Samples')
plt.ylabel('Amplitude')

plt.subplot(3, 1, 3)
plt.title('Error Signal (after cancellation)')
plt.plot(error_signal)
plt.xlabel('Samples')
plt.ylabel('Amplitude')

plt.tight_layout()
plt.show()
