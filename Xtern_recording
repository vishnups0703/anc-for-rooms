import numpy as np
import sounddevice as sd
import matplotlib.pyplot as plt
import time

# Parameters
fs = 44100  # Sampling frequency
duration = 5.0  # Duration for processing
mu = 0.98 # Step size for adaptation
delay = 20  # Delay for filter
N = 128  # Number of filter coefficients, try adjusting this
secondary_path_filter = np.array([0.3, 0.2, 0.1, 0.05, 0.01])
gain=10

# Initialize adaptive filter coefficients and buffers
w = np.zeros(N)
buffer_size = int(fs * duration)
anti_noise_signal = np.zeros(buffer_size)
error_signal = np.zeros(buffer_size)

# Capture noise from the microphone
print("Recording noise from the microphone...")
recorded_noise = sd.rec(buffer_size, samplerate=fs, channels=1, dtype='float64')
sd.wait()
recorded_noise = recorded_noise.flatten()
recorded_noise*=gain

# Placeholder for secondary path (optional: model with an impulse response)
def secondary_path_model(x):
    # Implement a simple secondary path model (e.g., FIR filter)
    # This is a basic pass-through model; modify as needed
    return x

# Run the FXLMS algorithm
for n in range(buffer_size - delay- N +1):
    # Input signal with secondary path modeling
    
    x = recorded_noise[n:n + N]
    x_filtered = np.convolve(x, secondary_path_filter, mode='full')[:N] # Pre-filter with the secondary path model
    

    # Adaptive filter output
    y_hat = np.dot(w, x_filtered)
    anti_noise_signal[n + delay] = y_hat

    # Calculate error signal
    error_signal[n + delay] = recorded_noise[n + delay] - y_hat

    # Update filter coefficients
    w += mu * error_signal[n + delay] * x_filtered
#anti_noise_signal*=gain
#error_signal*=gain
#recorded_noise*=gain
print("Playing Anti-Noise Signal (generated by the algorithm)...")
sd.play(anti_noise_signal, fs)
sd.wait()  # Wait until the sound has finished playing
time.sleep(2)
# Play the error signal (ideally, this should be close to zero)
print("Playing Error Signal (after cancellation)...")
sd.play(error_signal, fs)
sd.wait()

# Plot the signals for debugging
plt.figure(figsize=(15, 8))
plt.subplot(3, 1, 1)
plt.plot(recorded_noise)
plt.title("Original Noise Signal (Recorded)")
plt.xlabel("Samples")
plt.ylabel("Amplitude")

plt.subplot(3, 1, 2)
plt.plot(anti_noise_signal)
plt.title("Generated Anti-Noise Signal")
plt.xlabel("Samples")
plt.ylabel("Amplitude")

plt.subplot(3, 1, 3)
plt.plot(error_signal)
plt.title("Error Signal (After Cancellation)")
plt.xlabel("Samples")
plt.ylabel("Amplitude")

plt.tight_layout()
plt.show()
